//At the moment of submission (08/01/23):
/*
Runtime: 15 ms, faster than 96,97% of Rust online submissions.
Memory Usage: 2.8 MB, less than 84,85% of Rust online submissions.
*/

impl Solution {
    pub fn nearest_valid_point(x: i32, y: i32, points: Vec<Vec<i32>>) -> i32 {
        let mut best_dist: i32 = i32::MAX;
        let mut best_id: i32 = -1; 

        for i in 0..points.len() {
            if points[i][0] == x {
                if (y-points[i][1]).abs() < best_dist {
                    best_dist = (y-points[i][1]).abs();
                    best_id = i as i32;
                }
            }
            else if points[i][1] == y {
                if (x-points[i][0]).abs() < best_dist {
                    best_dist = (x-points[i][0]).abs();
                    best_id = i as i32;
                }
            }
        }
        return best_id;
    }
}
